# Generated by Django 4.2.7 on 2025-08-09 11:27

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import quotes.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quote_number', models.CharField(help_text='Auto-generated quote number (QT-YYYY-NNNN)', max_length=20, unique=True, validators=[quotes.validators.validate_quote_number])),
                ('cleaning_type', models.CharField(choices=[('general', 'General Cleaning'), ('deep', 'Deep Cleaning'), ('end_of_lease', 'End of Lease Cleaning'), ('ndis', 'NDIS Cleaning'), ('commercial', 'Commercial Cleaning'), ('carpet', 'Carpet Cleaning'), ('window', 'Window Cleaning'), ('pressure_washing', 'Pressure Washing')], help_text='Type of cleaning service', max_length=20)),
                ('property_address', models.TextField(help_text='Full property address for the cleaning service')),
                ('postcode', models.CharField(help_text='Property postcode for service area validation', max_length=4)),
                ('suburb', models.CharField(help_text='Property suburb', max_length=100)),
                ('state', models.CharField(choices=[('NSW', 'New South Wales'), ('VIC', 'Victoria'), ('QLD', 'Queensland'), ('WA', 'Western Australia'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('ACT', 'Australian Capital Territory'), ('NT', 'Northern Territory')], help_text='Property state', max_length=3)),
                ('number_of_rooms', models.PositiveIntegerField(help_text='Number of rooms to be cleaned', validators=[quotes.validators.validate_room_count])),
                ('square_meters', models.DecimalField(blank=True, decimal_places=2, help_text='Property size in square meters (optional)', max_digits=8, null=True, validators=[quotes.validators.validate_square_meters])),
                ('urgency_level', models.PositiveIntegerField(choices=[(1, 'Flexible (7+ days)'), (2, 'Standard (3-7 days)'), (3, 'Priority (1-3 days)'), (4, 'Urgent (Same day)'), (5, 'Emergency (ASAP)')], default=2, help_text='Service urgency level (affects pricing)', validators=[quotes.validators.validate_urgency_level])),
                ('preferred_date', models.DateField(blank=True, help_text="Client's preferred service date", null=True)),
                ('preferred_time', models.TimeField(blank=True, help_text="Client's preferred service time", null=True)),
                ('special_requirements', models.TextField(blank=True, help_text='Any special cleaning requirements or instructions')),
                ('access_instructions', models.TextField(blank=True, help_text='Property access instructions (keys, codes, etc.)')),
                ('is_ndis_client', models.BooleanField(default=False, help_text='Whether this is an NDIS client quote')),
                ('ndis_participant_number', models.CharField(blank=True, help_text='NDIS participant number (if applicable)', max_length=9)),
                ('plan_manager_name', models.CharField(blank=True, help_text='NDIS plan manager name (if applicable)', max_length=200)),
                ('plan_manager_contact', models.CharField(blank=True, help_text='NDIS plan manager contact details', max_length=100)),
                ('support_coordinator_name', models.CharField(blank=True, help_text='NDIS support coordinator name (if applicable)', max_length=200)),
                ('support_coordinator_contact', models.CharField(blank=True, help_text='NDIS support coordinator contact details', max_length=100)),
                ('estimated_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Auto-calculated estimated total price', max_digits=10)),
                ('base_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Base service price', max_digits=10)),
                ('extras_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Cost of additional services/extras', max_digits=10)),
                ('travel_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Travel cost based on location', max_digits=8)),
                ('urgency_surcharge', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Additional cost for urgent service', max_digits=8)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount applied to the quote', max_digits=8)),
                ('gst_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='GST amount (10% in Australia)', max_digits=8)),
                ('final_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final price including all adjustments', max_digits=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired'), ('converted', 'Converted to Job'), ('cancelled', 'Cancelled')], default='draft', help_text='Current quote status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When the quote was submitted by client', null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the quote was reviewed by staff', null=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='When the quote was approved', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Quote expiration date', null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Internal notes for staff (not visible to client)')),
                ('client_notes', models.TextField(blank=True, help_text='Notes visible to client')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for quote rejection (if applicable)')),
                ('source', models.CharField(default='website', help_text='How the quote was generated (website, phone, etc.)', max_length=50)),
                ('conversion_rate_applied', models.DecimalField(decimal_places=4, default=Decimal('1.0000'), help_text='Conversion rate applied for pricing calculations', max_digits=5)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Staff member assigned to handle this quote', limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_quotes', to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(help_text='Client who requested the quote', on_delete=django.db.models.deletion.CASCADE, related_name='quotes', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Staff member who reviewed the quote', limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_quotes', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(help_text='Primary service being quoted', on_delete=django.db.models.deletion.CASCADE, related_name='quotes', to='services.service')),
            ],
            options={
                'verbose_name': 'Quote',
                'verbose_name_plural': 'Quotes',
                'db_table': 'quotes_quote',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuoteTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Template name', max_length=200, unique=True)),
                ('description', models.TextField(help_text='Template description')),
                ('cleaning_type', models.CharField(choices=[('general', 'General Cleaning'), ('deep', 'Deep Cleaning'), ('end_of_lease', 'End of Lease Cleaning'), ('ndis', 'NDIS Cleaning'), ('commercial', 'Commercial Cleaning'), ('carpet', 'Carpet Cleaning'), ('window', 'Window Cleaning'), ('pressure_washing', 'Pressure Washing')], help_text='Default cleaning type', max_length=20)),
                ('default_urgency_level', models.PositiveIntegerField(choices=[(1, 'Flexible (7+ days)'), (2, 'Standard (3-7 days)'), (3, 'Priority (1-3 days)'), (4, 'Urgent (Same day)'), (5, 'Emergency (ASAP)')], default=2, help_text='Default urgency level')),
                ('is_active', models.BooleanField(default=True, help_text='Whether template is active')),
                ('is_ndis_template', models.BooleanField(default=False, help_text='Whether this is an NDIS-specific template')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times template has been used')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='Staff member who created the template', limit_choices_to={'is_staff': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('default_service', models.ForeignKey(help_text='Default service for this template', on_delete=django.db.models.deletion.CASCADE, to='services.service')),
            ],
            options={
                'verbose_name': 'Quote Template',
                'verbose_name_plural': 'Quote Templates',
                'db_table': 'quotes_quote_template',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['cleaning_type', 'is_active'], name='quotes_quot_cleanin_e109e0_idx'), models.Index(fields=['is_ndis_template'], name='quotes_quot_is_ndis_9ad2c7_idx')],
            },
        ),
        migrations.CreateModel(
            name='QuoteRevision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revision_number', models.PositiveIntegerField(help_text='Sequential revision number')),
                ('changes_summary', models.TextField(help_text='Summary of changes made')),
                ('previous_price', models.DecimalField(decimal_places=2, help_text='Price before revision', max_digits=10)),
                ('new_price', models.DecimalField(decimal_places=2, help_text='Price after revision', max_digits=10)),
                ('reason', models.TextField(help_text='Reason for the revision')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('quote', models.ForeignKey(help_text='Quote this revision belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='quotes.quote')),
                ('revised_by', models.ForeignKey(help_text='User who made the revision', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Quote Revision',
                'verbose_name_plural': 'Quote Revisions',
                'db_table': 'quotes_quote_revision',
                'ordering': ['-revision_number'],
                'indexes': [models.Index(fields=['quote', 'revision_number'], name='quotes_quot_quote_i_a81f74_idx'), models.Index(fields=['revised_by'], name='quotes_quot_revised_df77c5_idx')],
                'unique_together': {('quote', 'revision_number')},
            },
        ),
        migrations.CreateModel(
            name='QuoteItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('service', 'Main Service'), ('addon', 'Add-on Service'), ('extra', 'Extra Service'), ('material', 'Materials'), ('equipment', 'Equipment'), ('travel', 'Travel Cost'), ('surcharge', 'Surcharge'), ('discount', 'Discount')], help_text='Type of quote item', max_length=20)),
                ('name', models.CharField(help_text='Item name/description', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed item description')),
                ('quantity', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Item quantity', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total price (quantity × unit_price)', max_digits=10)),
                ('is_optional', models.BooleanField(default=False, help_text='Whether this item is optional')),
                ('is_taxable', models.BooleanField(default=True, help_text='Whether GST applies to this item')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order for displaying items')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('addon', models.ForeignKey(blank=True, help_text='Related add-on service (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, to='services.serviceaddon')),
                ('quote', models.ForeignKey(help_text='Quote this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='quotes.quote')),
                ('service', models.ForeignKey(blank=True, help_text='Related service (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, to='services.service')),
            ],
            options={
                'verbose_name': 'Quote Item',
                'verbose_name_plural': 'Quote Items',
                'db_table': 'quotes_quote_item',
                'ordering': ['display_order', 'created_at'],
                'indexes': [models.Index(fields=['quote', 'item_type'], name='quotes_quot_quote_i_50d607_idx'), models.Index(fields=['display_order'], name='quotes_quot_display_be8c18_idx')],
            },
        ),
        migrations.CreateModel(
            name='QuoteAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Uploaded file (JPG, PNG, PDF)', upload_to='quotes/attachments/%Y/%m/', validators=[quotes.validators.validate_file_size, quotes.validators.validate_image_file])),
                ('original_filename', models.CharField(help_text='Original filename', max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('file_type', models.CharField(help_text='MIME type of the file', max_length=50)),
                ('attachment_type', models.CharField(choices=[('image', 'Image'), ('document', 'Document'), ('floor_plan', 'Floor Plan'), ('reference', 'Reference Photo')], default='image', help_text='Type of attachment', max_length=20)),
                ('title', models.CharField(blank=True, help_text='Attachment title/caption', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Attachment description')),
                ('is_public', models.BooleanField(default=False, help_text='Whether attachment is visible to client')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order for displaying attachments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quote', models.ForeignKey(help_text='Quote this attachment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='quotes.quote')),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded this file', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Quote Attachment',
                'verbose_name_plural': 'Quote Attachments',
                'db_table': 'quotes_quote_attachment',
                'ordering': ['display_order', 'created_at'],
                'indexes': [models.Index(fields=['quote', 'attachment_type'], name='quotes_quot_quote_i_c85633_idx'), models.Index(fields=['uploaded_by'], name='quotes_quot_uploade_089221_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='quote',
            index=models.Index(fields=['client', 'status'], name='quotes_quot_client__badf70_idx'),
        ),
        migrations.AddIndex(
            model_name='quote',
            index=models.Index(fields=['quote_number'], name='quotes_quot_quote_n_6770d1_idx'),
        ),
        migrations.AddIndex(
            model_name='quote',
            index=models.Index(fields=['postcode', 'cleaning_type'], name='quotes_quot_postcod_06b53f_idx'),
        ),
        migrations.AddIndex(
            model_name='quote',
            index=models.Index(fields=['created_at'], name='quotes_quot_created_ede808_idx'),
        ),
        migrations.AddIndex(
            model_name='quote',
            index=models.Index(fields=['expires_at'], name='quotes_quot_expires_2e3f11_idx'),
        ),
        migrations.AddIndex(
            model_name='quote',
            index=models.Index(fields=['is_ndis_client'], name='quotes_quot_is_ndis_48445f_idx'),
        ),
    ]
