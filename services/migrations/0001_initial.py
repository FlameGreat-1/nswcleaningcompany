# Generated by Django 4.2.7 on 2025-08-02 08:02

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import services.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="NDISServiceCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[services.validators.validate_ndis_service_code],
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("unit_type", models.CharField(max_length=50)),
                (
                    "standard_rate",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("effective_from", models.DateField()),
                ("effective_to", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "NDIS Service Code",
                "verbose_name_plural": "NDIS Service Codes",
                "db_table": "ndis_service_codes",
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("general", "General Cleaning"),
                            ("deep", "Deep Cleaning"),
                            ("end_of_lease", "End of Lease Cleaning"),
                            ("ndis", "NDIS Cleaning"),
                            ("commercial", "Commercial Cleaning"),
                            ("carpet", "Carpet Cleaning"),
                            ("window", "Window Cleaning"),
                            ("pressure_washing", "Pressure Washing"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("short_description", models.CharField(max_length=300)),
                (
                    "pricing_type",
                    models.CharField(
                        choices=[
                            ("fixed", "Fixed Price"),
                            ("hourly", "Hourly Rate"),
                            ("per_room", "Per Room"),
                            ("per_sqm", "Per Square Meter"),
                            ("ndis_rate", "NDIS Standard Rate"),
                        ],
                        default="fixed",
                        max_length=20,
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[services.validators.validate_pricing],
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "minimum_charge",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=8
                    ),
                ),
                (
                    "estimated_duration",
                    models.PositiveIntegerField(
                        validators=[services.validators.validate_service_duration]
                    ),
                ),
                (
                    "duration_unit",
                    models.CharField(
                        choices=[
                            ("minutes", "Minutes"),
                            ("hours", "Hours"),
                            ("days", "Days"),
                        ],
                        default="hours",
                        max_length=10,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("is_ndis_eligible", models.BooleanField(default=False)),
                ("requires_quote", models.BooleanField(default=False)),
                ("minimum_rooms", models.PositiveIntegerField(default=1)),
                ("maximum_rooms", models.PositiveIntegerField(blank=True, null=True)),
                ("equipment_required", models.TextField(blank=True)),
                ("special_requirements", models.TextField(blank=True)),
                ("display_order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Service",
                "verbose_name_plural": "Services",
                "db_table": "services",
                "ordering": ["display_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                (
                    "category_type",
                    models.CharField(
                        choices=[
                            ("general", "General Cleaning"),
                            ("ndis", "NDIS Services"),
                            ("commercial", "Commercial Cleaning"),
                            ("specialized", "Specialized Services"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                ("is_ndis_eligible", models.BooleanField(default=False)),
                ("display_order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Service Category",
                "verbose_name_plural": "Service Categories",
                "db_table": "service_categories",
                "ordering": ["display_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceArea",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("suburb", models.CharField(max_length=100)),
                (
                    "postcode",
                    models.CharField(
                        max_length=4, validators=[services.validators.validate_postcode]
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("NSW", "New South Wales"),
                            ("VIC", "Victoria"),
                            ("QLD", "Queensland"),
                            ("WA", "Western Australia"),
                            ("SA", "South Australia"),
                            ("TAS", "Tasmania"),
                            ("ACT", "Australian Capital Territory"),
                            ("NT", "Northern Territory"),
                        ],
                        max_length=3,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("travel_time_minutes", models.PositiveIntegerField(default=0)),
                (
                    "travel_cost",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=8
                    ),
                ),
                ("service_radius_km", models.PositiveIntegerField(default=50)),
                (
                    "priority_level",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Service Area",
                "verbose_name_plural": "Service Areas",
                "db_table": "service_areas",
                "ordering": ["state", "suburb"],
                "unique_together": {("suburb", "postcode", "state")},
            },
        ),
        migrations.CreateModel(
            name="ServiceAddOn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "addon_type",
                    models.CharField(
                        choices=[
                            ("extra_service", "Extra Service"),
                            ("equipment", "Equipment"),
                            ("material", "Material"),
                            ("upgrade", "Service Upgrade"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_optional", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "services",
                    models.ManyToManyField(
                        related_name="addons", to="services.service"
                    ),
                ),
            ],
            options={
                "verbose_name": "Service Add-on",
                "verbose_name_plural": "Service Add-ons",
                "db_table": "service_addons",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="service",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="services",
                to="services.servicecategory",
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="ndis_service_code",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="services.ndisservicecode",
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="service_areas",
            field=models.ManyToManyField(
                related_name="services", to="services.servicearea"
            ),
        ),
        migrations.CreateModel(
            name="ServicePricing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("standard", "Standard"),
                            ("premium", "Premium"),
                            ("ndis", "NDIS"),
                            ("commercial", "Commercial"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                ("description", models.CharField(max_length=200)),
                ("is_active", models.BooleanField(default=True)),
                ("effective_from", models.DateField(default=django.utils.timezone.now)),
                ("effective_to", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing_tiers",
                        to="services.service",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service Pricing",
                "verbose_name_plural": "Service Pricing",
                "db_table": "service_pricing",
                "ordering": ["service", "tier"],
                "unique_together": {("service", "tier")},
            },
        ),
        migrations.CreateModel(
            name="ServiceAvailability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day_of_week",
                    models.PositiveIntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ]
                    ),
                ),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("is_available", models.BooleanField(default=True)),
                ("max_bookings", models.PositiveIntegerField(default=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availability",
                        to="services.service",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service Availability",
                "verbose_name_plural": "Service Availabilities",
                "db_table": "service_availability",
                "ordering": ["day_of_week", "start_time"],
                "unique_together": {("service", "day_of_week", "start_time")},
            },
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["service_type", "is_active"], name="services_service_6d9417_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["category", "is_active"], name="services_categor_6a9f2f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["is_ndis_eligible", "is_active"],
                name="services_is_ndis_39143b_idx",
            ),
        ),
    ]
